{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"[W12-D5] 타이베이시 주택가격 예측","provenance":[{"file_id":"1kudmqgAHNE2HdQ--Le_NlNUAf_NUIazc","timestamp":1626956203937},{"file_id":"19XEONDb-vdy88TAQ8_luVLfswyobWGNR","timestamp":1626543768215},{"file_id":"13u-ByLwpt-Vkg5qWdNgHxcdEGVo9FAGx","timestamp":1611987457697},{"file_id":"1W5booKKTZOmJX8F0kp9vaYBm9hGhhsE8","timestamp":1611853093485}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"xAqhTDfuWrcM"},"source":["PySpark을 로컬머신에 설치하고 노트북을 사용하기 보다는 머신러닝 관련 다양한 라이브러리가 이미 설치되었고 좋은 하드웨어를 제공해주는 Google Colab을 통해 실습을 진행한다."]},{"cell_type":"markdown","metadata":{"id":"XIA23YgbXKJd"},"source":["이를 위해 pyspark과 Py4J 패키지를 설치한다. Py4J 패키지는 파이썬 프로그램이 자바가상머신상의 오브젝트들을 접근할 수 있게 해준다. Local Standalone Spark을 사용한다."]},{"cell_type":"code","metadata":{"id":"NbT0rpGfVdiq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627006193041,"user_tz":-540,"elapsed":38373,"user":{"displayName":"Yoosun Nam","photoUrl":"","userId":"12428525429141467793"}},"outputId":"d68983d0-135f-4eef-dc12-00573f70eb0e"},"source":["!pip install pyspark==3.0.1 py4j==0.10.9 "],"execution_count":1,"outputs":[{"output_type":"stream","text":["Collecting pyspark==3.0.1\n","  Downloading pyspark-3.0.1.tar.gz (204.2 MB)\n","\u001b[K     |████████████████████████████████| 204.2 MB 31 kB/s \n","\u001b[?25hCollecting py4j==0.10.9\n","  Downloading py4j-0.10.9-py2.py3-none-any.whl (198 kB)\n","\u001b[K     |████████████████████████████████| 198 kB 21.6 MB/s \n","\u001b[?25hBuilding wheels for collected packages: pyspark\n","  Building wheel for pyspark (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pyspark: filename=pyspark-3.0.1-py2.py3-none-any.whl size=204612242 sha256=05f4490b6ae2bf87be2ea1e09da1477f0d838f62c6399dc27cb20b4723dbbc4d\n","  Stored in directory: /root/.cache/pip/wheels/5e/34/fa/b37b5cef503fc5148b478b2495043ba61b079120b7ff379f9b\n","Successfully built pyspark\n","Installing collected packages: py4j, pyspark\n","Successfully installed py4j-0.10.9 pyspark-3.0.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3vm6tgcPXdnR","executionInfo":{"status":"ok","timestamp":1627006220544,"user_tz":-540,"elapsed":432,"user":{"displayName":"Yoosun Nam","photoUrl":"","userId":"12428525429141467793"}}},"source":["from pyspark.sql import SparkSession\n","\n","spark = SparkSession \\\n","    .builder \\\n","    .appName(\"Taipei Housing Price Prediction\") \\\n","    .getOrCreate()"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pyl0gES0KhkF"},"source":["# 타이베이 주택 가격 예측 모델 만들기\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"BSkgIWglmw3-"},"source":["데이터셋 설명\n","\n","이번 문제는 대만 타이베이 시의 신단 지역에서 수집된 주택 거래 관련 정보를 바탕으로 주택 가격(정확히는 주택의 평당 가격)을 예측하는 Regression 모델을 만들어보는 것이다. 총 6개의 피쳐와 주택의 평당 가격에 해당하는 레이블 정보가 훈련 데이터로 제공된다. 레이블의 경우에는 주택의 최종 가격이 아니라 평당 가격이란 점을 다시 한번 강조한다.\n","\n","각 컬럼에 대한 설명은 아래와 같으며 모든 필드는 X4를 제외하고는 실수 타입이다.\n","\n","* X1: 주택 거래 날짜를 실수로 제공한다. 소수점 부분은 달을 나타낸다. 예를 들어 2013.250이라면 2013년 3월임을 나타낸다 (0.250 = 3/12)\n","* X2: 주택 나이 (년수)\n","* X3: 가장 가까운 지하철역까지의 거리 (미터)\n","* X4: 주택 근방 걸어갈 수 있는 거리내 편의점 수\n","* X5: 주택 위치의 위도 (latitude)\n","* X6: 주택 위치의 경도 (longitude)\n","* Y: 주택 평당 가격\n","\n"]},{"cell_type":"code","metadata":{"id":"LSs_1PYaYWxI","colab":{"base_uri":"https://localhost:8080/","height":216},"executionInfo":{"status":"ok","timestamp":1627006225887,"user_tz":-540,"elapsed":445,"user":{"displayName":"Yoosun Nam","photoUrl":"","userId":"12428525429141467793"}},"outputId":"b9ecb428-2cb6-4cdb-a6f5-74892a539dd9"},"source":["spark"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","            <div>\n","                <p><b>SparkSession - in-memory</b></p>\n","                \n","        <div>\n","            <p><b>SparkContext</b></p>\n","\n","            <p><a href=\"http://f0fb3c5d90c0:4040\">Spark UI</a></p>\n","\n","            <dl>\n","              <dt>Version</dt>\n","                <dd><code>v3.0.1</code></dd>\n","              <dt>Master</dt>\n","                <dd><code>local[*]</code></dd>\n","              <dt>AppName</dt>\n","                <dd><code>Taipei Housing Price Prediction</code></dd>\n","            </dl>\n","        </div>\n","        \n","            </div>\n","        "],"text/plain":["<pyspark.sql.session.SparkSession at 0x7fd9d0d62c50>"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"vE8iL4vy6705","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627006229743,"user_tz":-540,"elapsed":991,"user":{"displayName":"Yoosun Nam","photoUrl":"","userId":"12428525429141467793"}},"outputId":"0c328fea-b6ff-4326-bc5d-7113a03879ac"},"source":["!wget https://grepp-reco-test.s3.ap-northeast-2.amazonaws.com/Taipei_sindan_housing.csv"],"execution_count":5,"outputs":[{"output_type":"stream","text":["--2021-07-23 02:10:28--  https://grepp-reco-test.s3.ap-northeast-2.amazonaws.com/Taipei_sindan_housing.csv\n","Resolving grepp-reco-test.s3.ap-northeast-2.amazonaws.com (grepp-reco-test.s3.ap-northeast-2.amazonaws.com)... 52.219.58.119\n","Connecting to grepp-reco-test.s3.ap-northeast-2.amazonaws.com (grepp-reco-test.s3.ap-northeast-2.amazonaws.com)|52.219.58.119|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 20014 (20K) [text/csv]\n","Saving to: ‘Taipei_sindan_housing.csv’\n","\n","Taipei_sindan_housi 100%[===================>]  19.54K  --.-KB/s    in 0.06s   \n","\n","2021-07-23 02:10:29 (320 KB/s) - ‘Taipei_sindan_housing.csv’ saved [20014/20014]\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GfSzc03fOC6e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627006230208,"user_tz":-540,"elapsed":471,"user":{"displayName":"Yoosun Nam","photoUrl":"","userId":"12428525429141467793"}},"outputId":"4c51eaa2-c6a9-40ba-a927-dbfa4604feca"},"source":["!ls -tl"],"execution_count":6,"outputs":[{"output_type":"stream","text":["total 24\n","-rw-r--r-- 1 root root 20014 Jul 17 17:35 Taipei_sindan_housing.csv\n","drwxr-xr-x 1 root root  4096 Jul 16 13:20 sample_data\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"-mH3roiKIOix","executionInfo":{"status":"ok","timestamp":1627006238688,"user_tz":-540,"elapsed":6637,"user":{"displayName":"Yoosun Nam","photoUrl":"","userId":"12428525429141467793"}}},"source":["data = spark.read.csv('./Taipei_sindan_housing.csv', header=True, inferSchema=True)"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"SCty0kw6ITVi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627006238689,"user_tz":-540,"elapsed":12,"user":{"displayName":"Yoosun Nam","photoUrl":"","userId":"12428525429141467793"}},"outputId":"17c94e0c-db97-4d04-f53d-9216c0ed0784"},"source":["data.printSchema()"],"execution_count":8,"outputs":[{"output_type":"stream","text":["root\n"," |-- X1: double (nullable = true)\n"," |-- X2: double (nullable = true)\n"," |-- X3: double (nullable = true)\n"," |-- X4: integer (nullable = true)\n"," |-- X5: double (nullable = true)\n"," |-- X6: double (nullable = true)\n"," |-- Y: double (nullable = true)\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nrlYYyVfIV1e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627008244899,"user_tz":-540,"elapsed":439,"user":{"displayName":"Yoosun Nam","photoUrl":"","userId":"12428525429141467793"}},"outputId":"bc1a7876-9aa9-44f7-855b-ab62ace73536"},"source":["data.show()"],"execution_count":15,"outputs":[{"output_type":"stream","text":["+--------+----+--------+---+--------+---------+----+\n","|      X1|  X2|      X3| X4|      X5|       X6|   Y|\n","+--------+----+--------+---+--------+---------+----+\n","|2012.917|32.0|84.87882| 10|24.98298|121.54024|37.9|\n","|2012.917|19.5|306.5947|  9|24.98034|121.53951|42.2|\n","|2013.583|13.3|561.9845|  5|24.98746|121.54391|47.3|\n","|  2013.5|13.3|561.9845|  5|24.98746|121.54391|54.8|\n","|2012.833| 5.0|390.5684|  5|24.97937|121.54245|43.1|\n","|2012.667| 7.1| 2175.03|  3|24.96305|121.51254|32.1|\n","|2012.667|34.5|623.4731|  7|24.97933|121.53642|40.3|\n","|2013.417|20.3|287.6025|  6|24.98042|121.54228|46.7|\n","|  2013.5|31.7|5512.038|  1|24.95095|121.48458|18.8|\n","|2013.417|17.9| 1783.18|  3|24.96731|121.51486|22.1|\n","|2013.083|34.8|405.2134|  1|24.97349|121.53372|41.4|\n","|2013.333| 6.3|90.45606|  9|24.97433| 121.5431|58.1|\n","|2012.917|13.0|492.2313|  5|24.96515|121.53737|39.3|\n","|2012.667|20.4|2469.645|  4|24.96108|121.51046|23.8|\n","|  2013.5|13.2|1164.838|  4|24.99156|121.53406|34.3|\n","|2013.583|35.7|579.2083|  2| 24.9824|121.54619|50.5|\n","| 2013.25| 0.0|292.9978|  6|24.97744|121.54458|70.1|\n","| 2012.75|17.7|350.8515|  1|24.97544|121.53119|37.4|\n","|2013.417|16.9|368.1363|  8| 24.9675|121.54451|42.3|\n","|2012.667| 1.5|23.38284|  7|24.96772|121.54102|47.7|\n","+--------+----+--------+---+--------+---------+----+\n","only showing top 20 rows\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2fnlA-BxIPuN","executionInfo":{"status":"ok","timestamp":1627006285756,"user_tz":-540,"elapsed":2394,"user":{"displayName":"Yoosun Nam","photoUrl":"","userId":"12428525429141467793"}},"outputId":"dfd75fde-3c21-4f79-ab26-8bc9151fca7b"},"source":["data.select(['*']).describe().show()"],"execution_count":10,"outputs":[{"output_type":"stream","text":["+-------+------------------+------------------+------------------+------------------+--------------------+--------------------+------------------+\n","|summary|                X1|                X2|                X3|                X4|                  X5|                  X6|                 Y|\n","+-------+------------------+------------------+------------------+------------------+--------------------+--------------------+------------------+\n","|  count|               414|               414|               414|               414|                 414|                 414|               414|\n","|   mean|2013.1489710144933| 17.71256038647343|1083.8856889130436| 4.094202898550725|  24.969030072463745|  121.53336108695667| 37.98019323671498|\n","| stddev|0.2819672402629999|11.392484533242524| 1262.109595407851|2.9455618056636177|0.012410196590450208|0.015347183004592374|13.606487697735316|\n","|    min|          2012.667|               0.0|          23.38284|                 0|            24.93207|           121.47353|               7.6|\n","|    max|          2013.583|              43.8|          6488.021|                10|            25.01459|           121.56627|             117.5|\n","+-------+------------------+------------------+------------------+------------------+--------------------+--------------------+------------------+\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"owAwAZamN4hm"},"source":["## Feature Engineering"]},{"cell_type":"markdown","metadata":{"id":"iSaeeJMFIhDy"},"source":["### 데이터 클린업\n","- 숫자 값은 너무 큰 값이 없도록 0-1사이/정규분포 조정\n","- 카테고리 값은 숫자로 : 카테고리 데이터 없음\n","- 결측값 채우기 : 결측값 없음"]},{"cell_type":"markdown","metadata":{"id":"IP-y2UeONKYx"},"source":["* X1: 주택 거래 날짜를 실수로 제공한다. 소수점 부분은 달을 나타낸다. 예를 들어 2013.250이라면 2013년 3월임을 나타낸다 (0.250 = 3/12)  -> MinMaxScaler\n","* X2: 주택 나이 (년수)  -> MinMaxScaler\n","* X3: 가장 가까운 지하철역까지의 거리 (미터)  -> MinMaxScaler\n","* X4: 주택 근방 걸어갈 수 있는 거리내 편의점 수\n","* X5: 주택 위치의 위도 (latitude)   -> StandardScaler\n","* X6: 주택 위치의 경도 (longitude)  -> StandardScaler\n","* Y: 주택 평당 가격\n"]},{"cell_type":"code","metadata":{"id":"9RQUHUBOS2zz"},"source":["from pyspark.ml.feature import VectorAssembler\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":307},"id":"UfS45a6cIavg","executionInfo":{"status":"error","timestamp":1627008708254,"user_tz":-540,"elapsed":472,"user":{"displayName":"Yoosun Nam","photoUrl":"","userId":"12428525429141467793"}},"outputId":"a9a74a17-26c5-419b-e30a-b6bab17aa3ef"},"source":["from pyspark.ml.feature import StandardScaler, MinMaxScaler\n","\n","standardScaler = StandardScaler(inputCol='X5', outputCol='X5_scaled')\n","ss_model       = standardScaler.fit(data)\n","scaled_data    = ss_model.transform(data)"],"execution_count":17,"outputs":[{"output_type":"error","ename":"IllegalArgumentException","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIllegalArgumentException\u001b[0m                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-b0abc1e11baa>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mstandardScaler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mStandardScaler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputCol\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'X5'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutputCol\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'X5_scaled'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mss_model\u001b[0m       \u001b[0;34m=\u001b[0m \u001b[0mstandardScaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mscaled_data\u001b[0m    \u001b[0;34m=\u001b[0m \u001b[0mss_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pyspark/ml/base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, dataset, params)\u001b[0m\n\u001b[1;32m    127\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    128\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 129\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    130\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m             raise ValueError(\"Params must be either a param map or a list/tuple of param maps, \"\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pyspark/ml/wrapper.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    319\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    320\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 321\u001b[0;31m         \u001b[0mjava_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit_java\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    322\u001b[0m         \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjava_model\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    323\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_copyValues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pyspark/ml/wrapper.py\u001b[0m in \u001b[0;36m_fit_java\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    316\u001b[0m         \"\"\"\n\u001b[1;32m    317\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_transfer_params_to_java\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 318\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_java_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    319\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    320\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1303\u001b[0m         \u001b[0manswer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1304\u001b[0m         return_value = get_return_value(\n\u001b[0;32m-> 1305\u001b[0;31m             answer, self.gateway_client, self.target_id, self.name)\n\u001b[0m\u001b[1;32m   1306\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1307\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mtemp_arg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtemp_args\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pyspark/sql/utils.py\u001b[0m in \u001b[0;36mdeco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m    132\u001b[0m                 \u001b[0;31m# Hide where the exception came from that shows a non-Pythonic\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m                 \u001b[0;31m# JVM exception message.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 134\u001b[0;31m                 \u001b[0mraise_from\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconverted\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    135\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m                 \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pyspark/sql/utils.py\u001b[0m in \u001b[0;36mraise_from\u001b[0;34m(e)\u001b[0m\n","\u001b[0;31mIllegalArgumentException\u001b[0m: requirement failed: Column X5 must be of type struct<type:tinyint,size:int,indices:array<int>,values:array<double>> but was actually double."]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":290},"id":"poGLwFMqPgMo","executionInfo":{"status":"error","timestamp":1627008227476,"user_tz":-540,"elapsed":496,"user":{"displayName":"Yoosun Nam","photoUrl":"","userId":"12428525429141467793"}},"outputId":"f1cae3b7-4834-4a77-f216-301605306008"},"source":["minmaxScaler = MinMaxScaler(inputCol='X1', outputCol='X1_scaled')\n","mm_model     = minmaxScaler.fit(data)\n","scaled_data  = mm_model.transform(data)"],"execution_count":14,"outputs":[{"output_type":"error","ename":"IllegalArgumentException","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIllegalArgumentException\u001b[0m                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-c1ab0324d931>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mminmaxScaler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mMinMaxScaler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputCol\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'X1'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutputCol\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'X1_scaled'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmm_model\u001b[0m     \u001b[0;34m=\u001b[0m \u001b[0mminmaxScaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mscaled_data\u001b[0m  \u001b[0;34m=\u001b[0m \u001b[0mmm_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pyspark/ml/base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, dataset, params)\u001b[0m\n\u001b[1;32m    127\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    128\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 129\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    130\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m             raise ValueError(\"Params must be either a param map or a list/tuple of param maps, \"\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pyspark/ml/wrapper.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    319\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    320\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 321\u001b[0;31m         \u001b[0mjava_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit_java\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    322\u001b[0m         \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjava_model\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    323\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_copyValues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pyspark/ml/wrapper.py\u001b[0m in \u001b[0;36m_fit_java\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    316\u001b[0m         \"\"\"\n\u001b[1;32m    317\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_transfer_params_to_java\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 318\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_java_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    319\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    320\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1303\u001b[0m         \u001b[0manswer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1304\u001b[0m         return_value = get_return_value(\n\u001b[0;32m-> 1305\u001b[0;31m             answer, self.gateway_client, self.target_id, self.name)\n\u001b[0m\u001b[1;32m   1306\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1307\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mtemp_arg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtemp_args\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pyspark/sql/utils.py\u001b[0m in \u001b[0;36mdeco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m    132\u001b[0m                 \u001b[0;31m# Hide where the exception came from that shows a non-Pythonic\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m                 \u001b[0;31m# JVM exception message.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 134\u001b[0;31m                 \u001b[0mraise_from\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconverted\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    135\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m                 \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pyspark/sql/utils.py\u001b[0m in \u001b[0;36mraise_from\u001b[0;34m(e)\u001b[0m\n","\u001b[0;31mIllegalArgumentException\u001b[0m: requirement failed: Column X1 must be of type struct<type:tinyint,size:int,indices:array<int>,values:array<double>> but was actually double."]}]},{"cell_type":"code","metadata":{"id":"kU8Emu-OPM-E"},"source":["scaled_data.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_qtKP2zhMmGm"},"source":["### 피쳐 벡터 만들기"]},{"cell_type":"code","metadata":{"id":"359VxelqMp-p"},"source":[""],"execution_count":null,"outputs":[]}]}